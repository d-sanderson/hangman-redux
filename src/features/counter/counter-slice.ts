// put as much of logic for a given feature as possible into a single file
//  this is referred to as a slice file bc it represents the logic/data for one slice of redux state
// also reffered to as the 'DUCKS' pattern *quack quack*
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

// shape of state inside slice managed by reducer
interface CounterState {
  value: number
}

const initialState: CounterState = { value: 4 }

const reducers = {
  // increment
  increment(state: CounterState) {
    // its ok to do this bc immer makes it immutable under the hood
    state.value++;
  },
  // decrement
  decrement(state: CounterState) {
    state.value--;
  },
  // reset
  // reset(state: CounterState) {
  //   state.value = 0;
  // },
  // when we get action obj the payload field will be a number
  amountAdded(state: CounterState, action: PayloadAction<number>) {
    state.value += action.payload
  }
}

const counterSlice = createSlice({ name: 'counter', initialState, reducers })

// Action Creators (generated by names of reducers)
export const { increment, decrement, amountAdded } = counterSlice.actions
export default counterSlice.reducer